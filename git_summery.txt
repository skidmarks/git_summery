git 명령어 목록
==============

다음은 이 책에서 나오는 모든 명령에 몇 개를 더 추가한 Git명령어 목록이다.\
대괄호로 표시된 인자는 선택 사항이다.

## git config [--global] <key> <value>
Git을 설정하는 명령이다. <key>는 user.email과 같은 속성 이름이며 <value>는 david@demaree.com와 같은 속성값이다. --global 옵션은 설정 내용을 홈 디렉터리에 파일로 저장함으로써 모든 프로젝트에 동일한 설정이 적용되도록 한다. 이 옵션을 빼면 오직 현재 프로젝트에만 설정이 적용된다.

## git init
현재 작업 사본 안에서 새 Git 프로젝트를 만든다. 예를 들어 현재 작업 중인 웹사이트가 들어 있는 my-awesome-project라는 디렉터리 안에서 git init을 실행하면, 이 디렉터리를 바로 사용할 수 있는 새 Git 저장소로 만들어준다.

## git clone <url> [directory]
해당 URL에 있는 Git 프로젝트를 로컬 컴퓨터의 새 디렉터리로 복제한다. 기본적으로 디렉터리 이름은 복제하는 저장소의 이름을 따른다. 예를 들면 https://gitforhumans.info/rails.git 저장소는 rails라는 이름의 디렉터리로 복제된다. 그러나 다른 이름을 원한다면 인자로 넘기면 된다.

## git status [-s] [path/to/thing]
파일의 수정 여보, 스테이징 여보, 커밋 여부 등 작업 사본의 현재 상태를 보여준다. --short나 -s 옵션은 좀 더 요약된 출력 결과를 보여준다. git status는 기본적으로 프로젝트의 모든 상태를 보여주지만, 특정 디렉터리나 파일 경로를 지정해 그에 한정된 결과만 볼 수도 있다.

## git add [--all] filename.txt
변경된 파일을 스테이징 영역에 추가함으로써 다음 커밋에 편입시킨다.

## git rm folder/filename.txt
주어진 경로의 파일을 삭제하고, 이 변경 사항(삭제)을 스테이징한다. 파인더 등을 통해 이미 파일이 삭제됐다면 변경 사항을 스테이징만 한다.

## git mv oldpath.txt newpath.txt
oldpath.txt를 newpath.txt로 바꿔주고 변경 사항을 스테이징한다.

## git reset filename.txt
git add의 반대 개념으로, 스테이징된  filename.txt를 git reset을 사용해 스테이징이 되지 않은 상태로 되돌릴 수 있다.

## git commit [-a] [-m "Your message"]
git add를 사용해 스테이징한 커밋을 추가한다.  -all(또는 -a) 옵션을 추가하면 작업 사본에서의 모든 변경 사항을 자동으로 스테이징하고 커밋한다. 커밋 메시지를 지정하기 위해 --message(-m) 인자를 사용할 수 있으며, 이 부분을 비워두면 기본 텍스트 에디터가 열리거나 미리 설정한 사용자의 텍스트 에디터가 열린다.

## git branch [-r|-a]
모든 브랜치 목록을 보여준다. 기본적으로는 저장소의 로컬 사본에 있는 브랜치만을 보여주며, -r 옵션을 사용하면 리모트로부터 가져온 브랜치를, -a 옵션을 사용하면 로컬과 리모트 브랜치 모두를 보여준다.

## git branch <branchname> [<commit>]
브랜치 이름을 인자로 해 git branch를 실행하면 그 이름으로 새 브랜치를 만들며 현재의 커밋을 시작점으로 한다. 만약 커밋 ID까지 지정하면 그 커밋을 시작점으로 한다.

## git checkout [-b] <branchname-or-commit>
주어진 브랜치나 커밋에 일치되도록 작업 사본을 갱신한다. 한마디로 다른 브랜치나 커밋으로 전환시킨다. 브랜치를 체크아웃하면 그 브랜치로 전환되며 커밋을 추가할 수 있다. 커밋이나 태그를 체크아웃하면 어떤 브랜치로부터도 '분리된' 상태가 되며, 커밋을 만들 수는 있으나 커밋 ID로만 접근할 수 있게 된다.

## git merge <otherbranch>
충돌이 없다면 otherbranch를 현재 브랜치로 병합시킨다. 만약 충돌이 존재한다면 otherbranch의 가능한 사항들을 모두 스테이지하며, 파일에 충돌 사항을 표시해 사용자가 직접 문제를 해결하도록 요구한다.

## git remote add <name> <url>
지정한 URL에 해당하는 리모트를 로컬 Git 프로젝트에 지정한 이름으로 설정한다.

## git remote rm <remotename> <branchname>
지정한 이름의 리모트를 프로젝트 설정으로부터 삭제한다. 오직 로컬 컴퓨터에서만 리모트를 삭제하므로 모든 다른 컴퓨터나 서버에는 영향이 없다.

## git push <remotename> <branchname>
branchname이라는 브랜치의 현재 상태를 remotename이라는 리모트로 푸시한다.

## git pull <remotename> <branchname>
branchname이라는 브랜치의 현재 상태를 리모트로부터 로컬 사본으로 내려 현재의 브랜치에 병합한다.

## git fetch <remotename>
리모트의 모든 사항을 로컬 사본으로 복사한다. git pull 명령을 실행하면 git fetch 작업은 자동으로 포함된다. 

## git log [-oneline] [-pretty] [<branchname-or-commit>]
현재의 커밋부터(또는 지정한 브랜치 이름이나 커밋ID로부터) 시간 역순으로 커밋 목록을 보여준다. --pretty 옵션으로 출력 결과를 커스터마이징할 수 있다. --oneline은 많이 사용되는 출력 형식으로, 짧은 커밋ID와 커밋 메시지를 각 라인마다 보여준다.

## git diff [-stat] [<branchname-or-commit>]
두 커밋의 차이를 시각적으로 보여준다. --stat은 각 파일에 몇 번의 추가와 삭제가 일어났는지 용약해 보여주는 옵션이다.

## git tag [-a] [-m] [<commit>]
지정한 이름으로 커밋에 태그를 붙인다. -a 옵션은 만들어진 시간, 만든 사람, 메시지 등의 정보를 포함하는 주석 태그를 붙일 때 사용한다(그렇지 않은 태그는 경량 태그이며 커밋 참조 외에 다른 정보를 갖지 않는다). 주석 태그를 만들 때는 커밋의 경우와 마찬가지로 --message/-m 인자를 추가하기 바란다.

## git tag -d <tagname>
태그를 지울 필요는 없지만, 만약 그래야 한다면 git tag에 -d 옵션을 붙여 실행하면 된다.

## git tag -l
저장소에 있는 모든 태그 목록을 보여준다.

## git push --tags <remotename>
아직 공유할 준비가 안된 태그를 실수로 공휴하는 일에 대비한 안전장치로서, --tags 옵션을 붙이지 않으면 Git은 어떤 태그도 푸시하지 않는다. 

모든 Git 명령의 완벽한 목록과 자세한 설명을 원한다면 Git 웹사이트의 문서를 참고하기 바란다(<http://bkaprt.com/gfh/06-01/>).


# 추천 Git 앱
이 책에선 Git의 사상을 이해하기에 가장 좋은 명령행 인터페이스를 중심으로 설명했으며, 여전히 처음 시작은 명령행을 사용하길 권한다. 그러나 시간을 절약할 수 있는 여러 윈도우나 맥용 앱이 있어 이를 소개한다.

## GitHub 테스트톱(GitHub Desktop)
GitHub의 호스팅 서비스를 이용하든 안 하든 GitHub의 맥 또는 윈도우용 데스트톱 앱은 최고라 할 수 있다. 심지어 무료다. 변경 사항의 스테이징과 커밋, 브랜치의 생성과 전환, 리모트의 푸시와 풀을 시각적으로 작업할 수 있다. 만약 GitHub 호스팅을 받는다면 쉽게 풀 요청pull request(푸시한 변경 사항에 대해 다른 사람에게 검토를 요청하는 GitHub의 기능)이나 비교 화면을 실행할 수 있다(<http://bkaprt.com/gfh/06-02>)


## 타워(Tower)
79달러를 지불할 가치를 느끼는 맥 파워 유저라면 타워가 제공하는 다양한 옵션과 기능을 사용할 수 있다. GitHub 데스트톱이 기본에 충실하다면, 타워는 병합 충돌의 해결이나 입맛에 맞는 커밋 선별 등 많은 기능을 다른다(<http://bkaprt.com/gfh/06-03>).


## 소스트리(SourceTree)
소스트리는 타워에서와 같은 현란함은 없지만 무료이면서 GitHub 데스트톱보다는 더 강력한 기능을 원하는 사람에게 좋은 선택일 수 있다(<http://bkaprt.com/gfh/06-04>).

많은 유명한 코딩 툴이 Git 연계 기능을 내장하고 있거나 플러그인을 통해 지원하므로, 사용하던 앱을 바꾸지 않아도 변경 사항을 커밋할 수 있다. 아톰Atom, 코다Coda, 서브라임 텍스트Sublime Text, 텍스트 메이트TextMate, 비비에디트BBEdit, 엑스코드Xcode, 비주얼 스튜디오 코드Visual Studio Code는 모드 즉시 Git과 연계해 사용이 가능하다.


# Git 호스팅 서비스

## GitHub
한때 유일했으며 현재도 가장 널리 이용되는 Git 호스팅의 대명사다. 진행하고 있는 프로젝트가 있다면 아마 GitHub에서 무언가 하고 있을 가능성이 높다. GitHub는 모두가 사용하기 때문이다. GitHub가 대부분의 사람들에게 가장 좋은 선택일 수 있는 이유는, 풀 요청 등과 같이 Git을 통한 협업을 더욱 쉽게 해주는 툴과 자원, 또는 GitHub 페이지GitHub Pages와 같은 흥미로운 툴까지 제작사가 지속적으로 투자하고 있기 때문이다. GitHub에서 비공개 프로젝트를 호스팅하려면 비용이 발생한다. 누구든 코드를 풀하거나 다운로드할 수 있으며 팀원에 한해 푸시할 수 있도록 공개 프로젝트의 호스팅은 언제나 무료다.  GitHub 엔터프라이즈 서비스는 가장 큰 비용이 들지만, 자체 서버에서 GitHub를 운영함으로써 최상의 데이터 통제가 가능하다(<http://github.com>).

## 빗버킷(Bitbucket)
GitHub만큼 화려하진 않지만 빗버킷은 개인이나 소기업의 경우 비공개 프로젝트를 위한 저장소를 제안 없이 무료로 이용할 수 있단 이점이 있다. 빗버킷에는 GitHub만큼의 방대한 커뮤니티가 있지 않다. 따라서 협업이 필요한 공개 프로젝트의 경우엔 GitHub를, 개인적으로 소규모로 진행하는 비공개 프로젝트의 경우 빗버킷을 이용하는 방법도 좋다(<http://bitbucket.org>).

## 빈스토크(Beanstalk)
유료이며 비공개 프로젝트에 특화된 빈스토크는 웹 개발자를 위한 멋진 기능을 제공한다. 특히 새 코드를 저장소에 푸시했을 때 자동으로 웹 서버를 갱신해주는 개발 툴을 제공한다(<http://beanstalkapp.com>).

마지막으로, 만약 명령행에 익숙하며 테이터를 완전히 제어하고 싶거나 또는 그 밖의 괴짜스러운 작업을 즐기고 싶은 경우, 직접 호스팅을 운영하는 일도 어렵지 않다. Git의 기본 프로토콜은 SSH이므로 모든 리눅스 서버는 Git 저장소를 호스팅하는 게 가능하기 때문이다. 이와 관련해서 디지털오션DigitalOcean에서 작성한 사설 Git 서버 세팅 가이드를 참고하기 바란다(<http://bkaprt.com/gfh/06-05>).


# 추가 정보

## '명령행을 만나라(Meet the Command Line)'
댄 벤자민(Dan Benjamin)이 호스팅하는 이 스크린캐스트는 명령행 초보자에게 큰 리소스가 되며, 짧은 시간 안에 터미널을 통해 컴퓨터와 편하게 대화할 수 있도록 해준다(<http://bkaprt.com/gfh/06-06>). 또한 플루렁사이트Pluralsight에는 Git의 설치부터 브랜치를 다루는 고급 기법과 토픽 브랜치의 재지정까지 설명하는 제임스 코박스James Kovacs의 튜토리얼이 있다(<http://bkaprt.com/gfh/06-07>).

## GitHub 트레이닝
이 마이크로사이트에선 슬라이드 쇼 형식의 두 가지 온라인 교육을 제공한다. 하나는 명령행 베테랑을 위한 과정이며 다른 하나는 GUI 앱 사용자를 위한 과정이다. 또한 여러 명령어를 빠르게 참조할 수 있는 PDF뿐만 아니라, 직접 명령을 연습해볼 수 있는 브라우저 기반의 Git 시뮬레이터도 제공한다(<http://bkaprt.com/gfh/06-08>)

## 애틀라시안의 Git 튜토리얼
Git 초보자나 베테랑 모두에게 훌륭한 리소스가 되며, 깔끔한 설명과 그림을 통해 다양한 주제를 다룬다. 특히 Git 워크플로를 비교해 설명한 가이드는 매우 훌륭하다. 첵에서도 언급했던 허브 모델의 자세한 설명도 볼 수 있다(<http://bkaprt.com/gfh.06-09>).

## 타입 디자이너를 위한 Git
프랭크 그리스해머Frank Grieshammer가 타입 디자인 툴과 함께 Git을 사용하는 방법과 Git의 기본적인 워크플로를 설명한다(<http://bkaprt.com/gfh/06-10>).

## 프로 Git
스캇 샤콘Scott Chacon의 오픈소스 서적으로, Git의 작동 원리를 제대로 이해하고 싶은 사람에게 훌륭한 참고서가 되는 책이다(http://bkaprt.com/gfh/06-11).


# 유명한 Git 저장소

## 완전한 독일 법전을 트래킹하는 Git 저장소
이 저장소의 관리자는 >모든 독일 국민은 온라인으로 최신 법률을 확인할 수 있다. 그러나 입법 과정, 변화 이력, 수정된 부분만의 내용은 쉽고 자유롭게 추적하지 못한다고 말한다. 법적 사본을 Git을 통해 공개함으로써 누구든 쉽게 커밋 로그를 통해 법률이 어떻게 변경돼 왔는지 확인할 수 있다(<http://bkaprt.com/gfh/06-12>).

## 복스 미디어(Vox Media)의 행동 강령
복스는 자신들의 행동 갈령을 오픈소스화해 팀이나 커뮤니티에 의해 진화하고 발전하는, 즉 살아 있는 문서로 만들었다. 행동강령 웹사이트의 소스 코드는 GitHub에서 호스팅된다. 따라서 커뮤니티 일원은 이슈를 제기하거나, 패치를 올리거나, 또는 커밋 로그를 통해 코드의 변천사를 확인할 수 있다(<http://bkaprt.com/gfh/06-13>).

## 타코팬시(Tacofancy)
댄 싱커Dan Sinker가 만들고 관리하는, 커뮤니티 주도의 객체 지향 타코TACO(아파치 코르도바Apache Cordova를 위한 툴) 비법 저장소다. 타코팬시는 타코를 위한 완전한 비법과 개별 타코 컴포넌트도 제공한다(<http://bkaprt.com/gfh/06-14>).


## 코드란 무엇인가?
작가이자 프로그래머, GitHub의 열혈 사용자인 폴 포트Paul Ford(<http://bkaprt.com/gfh/06-14>)가 2015년 블룸버그 비즈니스위크Bloomberg Businessweek에 기고한 '코드란 무엇인가?'(http://bkaprt.com/gfh/06-16)에선 Git과 GitHub 관련 내용을 포함하는 장대한 아티클이다. 이 아티클의 재밌는 대화형 웹 버전이 있는데, 그 소스코드가 GitHub에 공개돼 있다(<http://bkaprt.com/gfh/06-17>).